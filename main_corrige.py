import streamlit as st
import openai
import re

# Configura√ß√µes da p√°gina (deve ser a primeira chamada do Streamlit)
st.set_page_config(page_title="Corrija sua reda√ß√£o para concurso!!!", page_icon="üìù", layout="wide")

# Fun√ß√£o para criar a corre√ß√£o da reda√ß√£o usando a API do OpenAI
def criar_correcao_redacao(redacao):
    # Montar o prompt de acordo com as informa√ß√µes inseridas pelo usu√°rio
    prompt = f"Corrija a reda√ß√£o abaixo levando em considera√ß√£o os seguintes crit√©rios:\n\n"

    for criterio in st.session_state['criterios']:
        prompt += f"- {criterio}\n"

    prompt += f"\nReda√ß√£o:\n{redacao}\n\nCorre√ß√£o:"

    # Enviar o prompt para a API do OpenAI
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "Voc√™ √© um assistente que corrige reda√ß√µes."},
            {"role": "user", "content": prompt}
        ]
    )

    # Retornar a corre√ß√£o da reda√ß√£o gerada pela API do OpenAI
    return response.choices[0].message['content']

# T√≠tulo da p√°gina
st.title("Corretor de Reda√ß√£o")

# Entrar com as credenciais do OPENAI
openai.api_key = st.text_input("Insira sua chave da API do OpenAI")

# Entrada do nome da banca
banca = st.text_input("Nome da Banca")

# Entrada dos crit√©rios de corre√ß√£o
criterios = st.text_area("Crit√©rios de Corre√ß√£o (um por linha)")

# Op√ß√£o de reda√ß√£o
opcao_redacao = st.radio("Op√ß√£o de Reda√ß√£o", ("Inserir Reda√ß√£o", "Gerar Reda√ß√£o"))

# Entrada da reda√ß√£o do usu√°rio ou gera√ß√£o de reda√ß√£o com o tema
redacao = ""

if opcao_redacao == "Inserir Reda√ß√£o":
    tema = st.text_input("Tema da Reda√ß√£o")
    redacao = st.text_area("Reda√ß√£o do Usu√°rio")

    # Bot√£o para corrigir a reda√ß√£o
    if st.button("Corrigir Reda√ß√£o") and redacao:
        # Validar o tamanho da reda√ß√£o
        num_linhas = redacao.count("\n") + 1

        if num_linhas < 20 or num_linhas > 30:
            st.warning("A reda√ß√£o deve ter entre 20 e 30 linhas.")
        else:
            # Processar os crit√©rios de corre√ß√£o
            criterios = re.split('\n|,', criterios)
            criterios = [criterio.strip() for criterio in criterios if criterio.strip()]
            criterios.append("Fuga do Tema")  # Adicionar o crit√©rio "fuga do tema"
            num_criterios = len(criterios)

            # Verificar se a reda√ß√£o atende aos crit√©rios
            criterios_presentes = [criterio for criterio in criterios if criterio.lower() in redacao.lower()]

            if len(criterios_presentes) != len(criterios):
                st.warning("A reda√ß√£o n√£o atende a todos os crit√©rios fornecidos.")
                criterios_nao_atendidos = set(criterios) - set(criterios_presentes)
                st.subheader("Crit√©rios n√£o atendidos:")
                st.write(criterios_nao_atendidos)
            else:
                # Armazenar as informa√ß√µes do usu√°rio na sess√£o do Streamlit
                st.session_state['banca'] = banca
                st.session_state['criterios'] = criterios

                # Criar a corre√ß√£o da reda√ß√£o usando a API do OpenAI
                correcao = criar_correcao_redacao(redacao)

                # Exibir a corre√ß√£o da reda√ß√£o na tela
                st.subheader("Corre√ß√£o da Reda√ß√£o")
                st.write(correcao)

                # Calcular e exibir a nota do candidato
                nota_total = 0
                for i, criterio in enumerate(criterios):
                    nota = 10 - ((len(correcao) / 100) * ((num_criterios - i) / num_criterios))  # C√°lculo da nota ponderada
                    nota = max(nota, 0)  # Garantir que a nota n√£o seja negativa
                    nota_total += nota

                nota_final = nota_total / num_criterios
                st.subheader("Nota")
                st.write(nota_final)

elif opcao_redacao == "Gerar Reda√ß√£o":
    tema = st.text_input("Tema da Reda√ß√£o")

    # Bot√£o para gerar a reda√ß√£o
    if st.button("Gerar Reda√ß√£o") and tema:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente que gera reda√ß√µes."},
                {"role": "user", "content": f"Escreva uma reda√ß√£o sobre o tema: {tema}"}
            ]
        )
        redacao = response.choices[0].message['content'].strip()

        # Exibir a reda√ß√£o gerada na tela
        st.subheader("Reda√ß√£o Gerada")
        st.write(redacao)
